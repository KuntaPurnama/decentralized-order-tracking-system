{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/OrderTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n//Error code\r\nerror OrderTracker_OrderNotFound(uint256 packageId);\r\nerror OrderTracker_StatusShouldBeDispatched(uint256 packageId);\r\nerror OrderTracker_CannotUpdateWithTheSameStatus(uint256 packageId);\r\n\r\n/**\r\n * @title decentralized order tracking system\r\n * @author Tano\r\n * @notice This contract is to implement secure and seamless decentralized order tracking system\r\n */\r\ncontract OrderTracker is Ownable {\r\n    //Define Enum\r\n    enum OrderStatus {\r\n        Dispatched,\r\n        InTransit,\r\n        Delivered\r\n    }\r\n\r\n    //Define Order Struct\r\n    struct Order {\r\n        uint256 packageId;\r\n        string sender;\r\n        string recepient;\r\n        uint256 dispatchTime;\r\n        uint256 deliveryTime;\r\n        OrderStatus status;\r\n        bool exists;\r\n    }\r\n\r\n    struct OrderHistory {\r\n        uint256 packageId;\r\n        OrderStatus status;\r\n        string note;\r\n        uint256 updatedTime;\r\n    }\r\n\r\n    //Define state variable\r\n    mapping(uint256 => Order) private s_packageIdToOrder;\r\n    mapping(uint256 => OrderHistory[]) private s_packageIdToOrderHistory;\r\n\r\n    Order[] private s_listOfOrders;\r\n\r\n    //Define events\r\n    event SuccessCreateOrder(\r\n        uint256 indexed packageId,\r\n        address indexed creator\r\n    );\r\n\r\n    event SuccessUpdateOrder(\r\n        uint256 indexed packageId,\r\n        address indexed creator,\r\n        OrderStatus indexed status\r\n    );\r\n\r\n    constructor() Ownable(msg.sender) {}\r\n\r\n    /**\r\n     * @dev creating new order by passing the order struct as paramater and record it in related state variable\r\n     */\r\n    function createOrder(Order memory order) external onlyOwner{\r\n        //New order status can't be any other than Dispatched\r\n        if (order.status != OrderStatus.Dispatched) {\r\n            revert OrderTracker_StatusShouldBeDispatched(order.packageId);\r\n        }\r\n\r\n        //set the exists true so it means the order is recorder and exists in our storage\r\n        order.exists = true;\r\n\r\n        s_listOfOrders.push(order);\r\n        s_packageIdToOrder[order.packageId] = order;\r\n\r\n        OrderHistory memory history = OrderHistory({\r\n            packageId: order.packageId,\r\n            status: order.status,\r\n            updatedTime: block.timestamp,\r\n            note: \"Order is created\"\r\n        });\r\n\r\n        s_packageIdToOrderHistory[order.packageId].push(history);\r\n        emit SuccessCreateOrder(order.packageId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev We pass enum as parameter so we don't need to manually validate if the given input is valid enum\r\n     * If the input is undefined enum value, it automatically give error before it reaches our function\r\n     * We also need to check the order existence\r\n     * User only can update status into different status\r\n     */\r\n    function updateOrderStatus(\r\n        uint256 packageId,\r\n        OrderStatus status,\r\n        string memory note\r\n    ) external onlyOwner {\r\n        Order memory order = s_packageIdToOrder[packageId];\r\n\r\n        if (!order.exists) {\r\n            revert OrderTracker_OrderNotFound(packageId);\r\n        }\r\n\r\n        if (order.status == status) {\r\n            revert OrderTracker_CannotUpdateWithTheSameStatus(order.packageId);\r\n        }\r\n\r\n        //update the order status\r\n        s_packageIdToOrder[packageId].status = status;\r\n\r\n        //Add the order status history\r\n        OrderHistory memory history = OrderHistory({\r\n            packageId: order.packageId,\r\n            status: status,\r\n            updatedTime: block.timestamp,\r\n            note: note\r\n        });\r\n\r\n        s_packageIdToOrderHistory[order.packageId].push(history);\r\n        emit SuccessUpdateOrder(order.packageId, msg.sender, status);\r\n    }\r\n\r\n    /**\r\n     * @dev getter function\r\n     */\r\n    function getListOfOrders() public view returns (Order[] memory) {\r\n        return s_listOfOrders;\r\n    }\r\n\r\n    function getOrder(uint256 packageId) public view returns (Order memory) {\r\n        Order memory order = s_packageIdToOrder[packageId];\r\n\r\n        if (!order.exists) {\r\n            revert OrderTracker_OrderNotFound(packageId);\r\n        }\r\n\r\n        return order;\r\n    }\r\n\r\n    function getOrderHistory(\r\n        uint256 packageId\r\n    ) public view returns (OrderHistory[] memory) {\r\n        Order memory order = s_packageIdToOrder[packageId];\r\n\r\n        if (!order.exists) {\r\n            revert OrderTracker_OrderNotFound(packageId);\r\n        }\r\n\r\n        return s_packageIdToOrderHistory[packageId];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}